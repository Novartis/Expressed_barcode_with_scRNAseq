import itertools
import os
import math
import pickle
import subprocess
import unittest
#import cProfile

from bisect import bisect_left
from collections import defaultdict
from copy import copy
from datetime import datetime

import classes

ws_charvals = list()
ws_charvals.append({'A': 0, 'T': 1})
ws_charvals.append({'G': 0, 'C': 1})
ws_intvals = list()
ws_intvals.append({0: 'A', 1: 'T'})
ws_intvals.append({0: 'G', 1: 'C'})

basic_charvals = {'A': 0, 'C': 1, 'G': 2, 'T': 3}
basic_intvals = {val: key for key, val in basic_charvals.iteritems()}

basic_charvals_with_unknown = {'N': 0, 'A': 1, 'C': 2, 'G': 3, 'T': 4}
basic_intvals_with_unknown = {val: key for key, val in basic_charvals_with_unknown.iteritems()}

# global totalcount


class zippedFile:

    def unzip(self, fnames):

        try:
            if fnames[0][-4:] == ".bz2":
                f = subprocess.Popen(["bunzip2", "-c"] + fnames, stdout=subprocess.PIPE, close_fds=True)
            elif fnames[0][-3:] == ".gz":
                f = subprocess.Popen(["zcat", "-f"] + fnames, stdout=subprocess.PIPE, close_fds=True)
            elif fnames[0][-6:] in (".fastq", ".fasta") or fnames[0][-3:] in (".fq", ".fa"):
                f = subprocess.Popen(["cat"] + fnames, stdout=subprocess.PIPE, close_fds=True)
            else:
                raise classes.Common.print_error("Unrecognized file format")
            try:
                for line in f.stdout:
                    yield line
            finally:
                f.terminate()
        except:
            raise

    def __init__(self, fname):
        self.fname = fname
        self.fnames = fname.split(",")
        self.generator = self.unzip(self.fnames)

    def close(self):
        self.generator.close()


class Barcode:
    # global totalcount

    def __init__(self, barcode, count, nearestHam, nearestHamDist, barcodeLength = 30, hasWsReq = True, hasUnknownBases = False):
        self.barcodes = [barcode]
        self.counts = [count]
        self.nearestHam = nearestHam
        self.nearestHamDist = nearestHamDist
        self.totalcount = count
        self.barcodeLength = barcodeLength
        self.hasUnknownBases = hasUnknownBases
        self.hasWsReq = hasWsReq
        self.baseSizeInBits = 1 if self.hasWsReq else (3 if self.hasUnknownBases else 2)
        self.numBits = self.barcodeLength * self.baseSizeInBits
        self.bitExtractor = 2 ** self.baseSizeInBits - 1
        self.totalCountForAllBarcodes = 0
        self.barcodeSequence = self.getBarcodeString()

    def add(self, barcode, count):
        self.barcodes.append(barcode)
        self.counts.append(count)
        self.totalcount += count

    def __str__(self):
        mainCount = self.counts[0]
        totalCount = self.totalcount
        totalCountForAllBarcodes = self.totalCountForAllBarcodes
        fractionOfAllBarcodes = totalCount/float(totalCountForAllBarcodes)
        return self.barcodeSequence + "\t" + str(mainCount) + "\tTotal\t" + str(totalCount) + \
               "\tFraction_of_all_barcodes\t" + str(fractionOfAllBarcodes) + "\t"+str(self.nearestHamDist) + \
               "_From_" + self.nearestHam + "\t" \
               + "\t".join(self.getBarcodeString(i) + '\t' + str(self.counts[i]) for i in xrange(1, len(self.barcodes)))

    def hamdist(self, otherint):
        xor = self.barcodes[0] ^ otherint
        return sum([0 if ((xor >> i * self.baseSizeInBits) & self.bitExtractor) == 0 else 1 for i in xrange(self.numBits)])

    def hamdist_str(self, otherStr, max_hamming_distance = None):
        if len(self.barcodeSequence) != len(otherStr):
            raise ValueError("Unequal lengths")
        if max_hamming_distance is None:
            max_hamming_distance = float("inf")
        d = 0
        for i in xrange(len(self.barcodeSequence)):
            if self.barcodeSequence[i:i+1] != otherStr[i:i+1]:
                d += 1
            if d > max_hamming_distance:
                return None
        return d

    def __lt__(self, other):
        return self.totalcount > other.totalcount

    def __eq__(self, other):
        return self.barcodes[0]

    def __hash__(self):
        return self.barcodes[0]

    def setTotalCountForAllBarcodes(self, count):
        self.totalCountForAllBarcodes = count

    def getBarcodeString(self, i = 0):
        barcodeInt = self.barcodes[i]
        try:
            if self.hasWsReq:
                return int2string_withWSReq(barcodeInt, self.barcodeLength)
            else:
                return int2string_basic(barcodeInt, self.barcodeLength, self.hasUnknownBases)
        except AttributeError:
            raise

powersoftwo = [2**i for i in range(31)]

def extractKnownContaminantSet(known_contaminant_file):
    known_contaminant_set = set()
    if known_contaminant_file is None or known_contaminant_file == "":
        return known_contaminant_set
    fh = open(known_contaminant_file)
    for line in fh:
        known_contaminant_set.add(line.strip())
    fh.close()
    return known_contaminant_set

def similarBarcodes(barcode, numbits=30, hamDist=2, allowIndels=False, numBitsPerBase=1):
    if allowIndels:
        for bc in mutate_with_indels(barcode, 0, numbits, hamDist, numBitsPerBase):
            yield bc
    else:
        for bc in mutate(barcode, 0, numbits, hamDist, numBitsPerBase):
            yield bc


def mutate(barcode, bitstart, bitend, hamDist, numBitsPerBase = 1):
    if hamDist == 1:
        for i in xrange(bitstart, bitend, numBitsPerBase):
            to_xor = all_to_xor(i, numBitsPerBase)
            for val in to_xor:
                yield barcode ^ val
    else:
        for i in xrange(bitstart, bitend, numBitsPerBase):
            to_xor = all_to_xor(i, numBitsPerBase)
            for val in to_xor:
                temp = barcode ^ val
                for result in mutate(temp, i+numBitsPerBase, bitend, hamDist - 1, numBitsPerBase):
                    yield result


def all_to_xor(minPower, numBitsPerBase):
    powers = [2 ** i for i in xrange(minPower, minPower + numBitsPerBase)]
    to_xor = copy(powers)
    if numBitsPerBase > 1:
        to_xor.extend(allPairwiseSums(powers))
    if numBitsPerBase > 2:
        to_xor.extend(allThreewiseSums(powers))
    if numBitsPerBase > 3:
        raise NotImplementedError("mutate function only supports bit sizes 1-3")
    return sorted(to_xor)

def allPairwiseSums(nums):
    cartProduct = list(itertools.product(nums, nums))
    sums = set()
    for (a,b) in cartProduct:
        if a != b:
            sums.add(a+b)
    return sums

def allThreewiseSums(nums):
    cartProduct = list(itertools.product(nums, nums))
    cartProduct = [(a, b, c) for (a, b), c in list(itertools.product(cartProduct, nums))]
    sums = set()
    for (a, b, c) in cartProduct:
        if a != b and b != c and a != c:
            sums.add(a+b+c)
    return sums


def mutate_with_indels(barcode, bitstart, bitend, hamDist, numBitsPerBase=1):
    if numBitsPerBase != 1:
        raise NotImplementedError("mutate_with_indels function does not support base size of > 1 bits")
    if hamDist == 1:
        for i in xrange(bitstart, bitend):
            yield barcode ^ powersoftwo[i]
        tested = set()
        for bmi in xrange(bitend-2, 1, -1):
            temp = (barcode >> bmi) % 4
            temp2 = (barcode >> bmi-2) % 4
            if temp == temp2:
                #2bp repeat
                bc = (barcode >> bmi << bmi) + ((barcode % (1<<bmi-2)) << 2)
                if not bc in tested:
                    tested.add(bc)
                    yield bc
                #2bp insertion
                bc = (barcode >> bmi << bmi) + ((barcode % (1<<bmi)) >> 2) + (temp << bmi-2)
                if not bc in tested:
                    tested.add(bc)
                    yield bc
                #4bp insertion
                if bmi>=4:
                    bc = (barcode >> bmi << bmi) + ((barcode % (1<<bmi)) >> 4) + (temp << bmi-2) + (temp << bmi-4)
                    if not bc in tested:
                        tested.add(bc)
                        yield bc
        for bmi in xrange(bitend-4, 3, -1):
            temp = (barcode >> bmi) % 16
            temp2 = (barcode >> bmi-4) % 16
            if temp==temp2:
                #4bp repeat
                bc = (barcode >> bmi << bmi) + ((barcode % (1<<bmi)) >> 4) + (temp << bmi-4)
                if not bc in tested:
                    tested.add(bc)
                    yield bc
                #8bp insertion
                if bmi >= 8:
                    bc = (barcode >> bmi << bmi) + ((barcode % (1<<bmi)) >> 8) + (temp << bmi-4) + (temp << bmi-8)
                    if not bc in tested:
                        tested.add(bc)
                        yield bc
    else:
        for i in xrange(bitstart, bitend):
            temp = barcode ^ powersoftwo[i]
            for result in mutate_with_indels(temp, i+1, bitend, hamDist - 1):
                yield result

def int2string_withWSReq(input, mylen=30):
    cur = 0
    if mylen % 2 == 0:
        cur += 1
    toreturn = ''
    for i in xrange(mylen):
        toreturn += ws_intvals[cur][input & 1]
        input = input >> 1
        if cur == 0:
            cur = 1
        else:
            cur = 0
    return toreturn[::-1]

def int2string_basic(input, length, with_unknown=False):
    toReturn = ''
    intVals = basic_intvals_with_unknown if with_unknown else basic_intvals
    baseSizeInBits = int(math.ceil(math.log(len(intVals), 2)))
    bitExtractor = 2 ** baseSizeInBits - 1
    for i in xrange(length):
        toReturn += intVals[input & bitExtractor]
        input = input >> baseSizeInBits
    return toReturn[::-1]


class BarcodeCounter:
    # global total_count

    DEFAULT_NEIGHBOR_NAME = "None.0"
    DEFAULT_HAMMING_DISTANCE = 30
    MAX_HAMMING_DISTANCE_FOR_DICT = 2
    MAX_HAMMING_DISTANCE_FOR_OBJECTS = 3
    MIN_OBSERVATIONS_FOR_HAMMING_DISTANCE = {1: 8, 2: 40} # need to see main barcode at least 8 times to expect to see a 1-off at least twice, 40 times for 2-off
    MIN_COUNT_FOLD_DIFFERENCE = 50

    def __init__(self, barcode_index, phred_format = 33, known_contaminant_file = None, library_mode = False, barcode_length = 30,
                 base_cutoff = 10, average_cutoff = 30, allow_indels = False, no_ws_req = False, unknown_bases = False,
                 include_sequences_file = None, exclude_sequences_file = None, sequence_primer = None, max_hamming_distance = 3):
        self.barcode_index = barcode_index
        self.phred_format = phred_format
        self.library_mode = library_mode
        self.allow_indels = allow_indels
        self.no_ws_req = no_ws_req
        self.unknown_bases = unknown_bases
        if not no_ws_req:
            self.base_size_in_bits = 1
        else:
            self.base_size_in_bits = 3 if unknown_bases else 2

        self.counts = defaultdict(int)
        self.total_count = 0
        self.total_tries = 0

        self.num_bad_end = 0
        self.num_bad_seq = 0
        self.num_bad_qual_base = 0
        self.num_bad_qual_avg = 0
        self.num_exceptions = 0
        self.num_seqs_with_unknown_bases = 0

        self.barcode_length = barcode_length
        self.base_cutoff = base_cutoff
        self.average_cutoff = average_cutoff
        self.barcode_index_length = len(barcode_index)

        self.known_contaminant_set = extractKnownContaminantSet(known_contaminant_file)
        self.known_contaminant_count = 0

        self.library = set()
        self.seeds = []
        self.seedSequences = []
        self.unseeded = set()
        self.seqToSeeds = {}
        self.max_hamming_distance = max_hamming_distance

        if include_sequences_file is not None:
            with open(include_sequences_file) as f:
                self.include_sequences = f.readlines()
        else:
            self.include_sequences = None
        if exclude_sequences_file is not None:
            with open(exclude_sequences_file) as f:
                self.exclude_sequences = f.readlines()
        else:
            self.exclude_sequences = None
        if sequence_primer is not None:
            with open(sequence_primer) as f:
                self.sequence_primer = f.read().splitlines()
            self.sequence_primer = [self.string2int(seq) for seq in self.sequence_primer]
        else:
            self.sequence_primer = None


        self.toPrint = []
        self.addedBarcodes = {}
        self.similarBarcodeDict = {} # key is Hamming distance, value is dictionary of barcode int to Barcode object
        for i in range(1, self.MAX_HAMMING_DISTANCE_FOR_DICT + 1):
            self.similarBarcodeDict[i] = {}
        self.lessThanTwo = 0
        self.lessThanTwoList = []
        self.barcodes = []

    def processInputFiles(self, inputFileList):
        fh = zippedFile(inputFileList)  # open(sys.argv[1])
        line_num = 0
        sequence = ""
        quality = ""
        for line in fh.generator:
            if line_num % 4 == 1:
                if line_num % 4000000 == 1:
                    print("Processing sequence # " + str( (line_num - 1) / 4 + 1 ) + ": " + currentTime())
                if line_num > 1:
                    self.processSequence(sequence, quality)
                sequence = line.strip()
            elif line_num % 4 == 3:
                quality = line.strip()
            line_num += 1
        self.processSequence(sequence, quality)
        fh.close()

    def processSequence(self, raw_sequence, qual_line):
        self.total_tries += 1

        barcode_sequence = raw_sequence[:self.barcode_length]
        if barcode_sequence in self.known_contaminant_set:
            self.known_contaminant_count += 1
            return

        # sequence needs to be long enough to hold the barcode and the index if applicable
        if self.seqTooShort(raw_sequence):
            self.num_bad_seq += 1
            return

        # index should come right after the barcode
        if self.badEnd(raw_sequence):
            self.num_bad_end += 1
            return

        # sequence needs to fit requirements for int conversion
        barcodeIntVal = self.string2int(barcode_sequence)
        if barcodeIntVal is None:
            self.num_bad_seq += 1
            if 'N' in barcode_sequence:
                self.num_seqs_with_unknown_bases += 1
            return

        # bad_base = False
        # Initialize
        total_score = 0
        count_chars = 0

        # Get the average quality of all the nucleotides
        for char_index in range(0, self.barcode_length):
            phred_score = ord(qual_line[char_index]) - self.phred_format
            if phred_score < self.base_cutoff:
                self.num_bad_qual_base += 1
                return
            total_score += phred_score
            count_chars += 1

        try:
            if (total_score * 1.0)/self.barcode_length < self.average_cutoff:
                self.num_bad_qual_avg += 1
                return
        except ZeroDivisionError:
            self.num_exceptions += 1
            return

        self.total_count += 1
        self.counts[barcodeIntVal] += 1

    def seqTooShort(self, sequence):
        return len(sequence) < self.barcode_length + self.barcode_index_length

    def badEnd(self, sequence):
        return sequence[self.barcode_length : self.barcode_length + self.barcode_index_length] != self.barcode_index

    def postSequenceProcessing(self):
        self.total_count = float(self.total_count)
        self.barcodes = sorted(self.counts.items(), key=lambda x: x[1], reverse=True)

    def generateSeedBarcodes(self):
        numBarcodes = len(self.barcodes)
        for (i, (barcodeInt, count)) in enumerate(self.barcodes):
            if i % 10000 == 0:
                print("At barcode # " + str(i+1) + "/" + str(numBarcodes) + ": " + currentTime())
            self.processBarcode(barcodeInt, count, seed = True)

    def generateBarcodeObjects(self):
        if self.library_mode:
            if self.use_seeds:
                raise AssertionError
            self.generateDefaultBarcodeObjects()
            return
        if self.sequence_primer is not None:
            if self.use_seeds:
                raise AssertionError
            self.sorted_sequence_primer = sorted(self.sequence_primer)

        seqs = self.unseeded if self.use_seeds else self.barcodes
        numBarcodes = len(seqs)
        for (i, (barcodeInt, count)) in enumerate(seqs):
            if i % 10000 == 0:
                print("At barcode # " + str(i+1) + "/" + str(numBarcodes) + ": " + currentTime())
            self.processBarcode(barcodeInt, count, group = self.use_seeds)

    def generateDefaultBarcodeObjects(self):
        self.toPrint = map(lambda x: Barcode(x[0], x[1], self.DEFAULT_NEIGHBOR_NAME, 0, barcodeLength=self.barcode_length,
                                             hasWsReq = not self.no_ws_req, hasUnknownBases=self.unknown_bases), self.barcodes)

    def getLibrarySequenceIntegerValues(self, fastaFiles):
        fh = zippedFile(fastaFiles)
        intValues = {}
        lineNum = 0
        for line in fh.generator:
            if lineNum % 2 == 1:
                if lineNum > 1:
                    self.processLibrarySequence(sequence, intValues)
                sequence = line.strip()
            lineNum += 1
        if lineNum > 1:
            self.processLibrarySequence(sequence, intValues)
        fh.close()
        return set(intValues.values())

    def processLibrarySequence(self, sequence, intValues):
        if sequence not in intValues: # so we don't have to do redundant string to int conversion
            intValues[sequence] = self.string2int(sequence)

    def processBarcode(self, barcodeInt, count, seed=False, group=False):
        if count < 2:
            self.lessThanTwo += 1
            self.lessThanTwoList.append(barcodeInt)
            return False

        if seed or group:
            if (seed and group) or len(self.library) == 0:
                raise AssertionError
            if seed: # seed matching
                if binarySearch(self.library, barcodeInt) >= 0:
                    newBarcodeObj = self.createBarcodeObject(barcodeInt, count, simple = True)
                    if newBarcodeObj is None:
                         raise AssertionError
                    self.seeds.append(newBarcodeObj)
                    self.seedSequences.append(self.int2string(barcodeInt))
                    # self.seeds.append(self.int2string(barcodeInt))
                    # return True
                else:
                    self.unseeded.add((barcodeInt, count))
                    return False
            else: # grouping by seed
                closestSeeds = self.getClosestSeeds(barcodeInt, count)
                numClosestSeeds = len(closestSeeds)
                if numClosestSeeds == 0:
                    return False
                for closestSeed in closestSeeds:
                    closestSeed.add(barcodeInt, count/numClosestSeeds) # to break ties we divvy up the counts equally as "partial" counts
                return True
        else:
            # if we've already seen a barcode with sufficiently high count and Hamming distance 1-2 from the current one,
            # then we group it with that one (counts are in sorted order, so we know the previous count was higher than this one)
            groupedWithPrevious = self.groupWithPrevious(barcodeInt, count)
            if groupedWithPrevious:
                return False

            newBarcodeObj = self.createBarcodeObject(barcodeInt, count)
            if newBarcodeObj is None:
                return False

        self.toPrint.append(newBarcodeObj)
        self.addedBarcodes[barcodeInt] = newBarcodeObj
        self.addBarcodeObjectToSimilarBarcodeDictionaries(barcodeInt, count, newBarcodeObj)
        return True

    def groupWithPrevious(self, barcodeInt, count):
        for dist in range(1, self.MAX_HAMMING_DISTANCE_FOR_DICT + 1):
            if barcodeInt in self.similarBarcodeDict[dist]:
                self.similarBarcodeDict[dist][barcodeInt].add(barcodeInt, count)
                return True
        return False

    def createBarcodeObject(self, barcodeInt, count, simple = False):
        if self.sequence_primer is not None and barcodeInt not in self.sequence_primer:
             return None

        nearestNeighbor = None
        nearestHamDist = self.DEFAULT_HAMMING_DISTANCE

        if not simple:
            for barcodeObj in self.toPrint:
                if barcodeObj.counts[0] < self.MIN_COUNT_FOLD_DIFFERENCE * count:
                    break
                hamDist = barcodeObj.hamdist(barcodeInt)
                if hamDist < nearestHamDist:
                    nearestNeighbor = barcodeObj
                    nearestHamDist = hamDist

            if nearestNeighbor is not None and nearestHamDist <= self.MAX_HAMMING_DISTANCE_FOR_OBJECTS:
                nearestNeighbor.add(barcodeInt, count)
                return None

        if nearestNeighbor is None:
            newBarcodeObj = Barcode(barcodeInt, count, self.DEFAULT_NEIGHBOR_NAME, nearestHamDist,
                                    barcodeLength = self.barcode_length, hasWsReq = not self.no_ws_req, hasUnknownBases = self.unknown_bases)
        else:
            newBarcodeObj = Barcode(barcodeInt, count, nearestNeighbor.getBarcodeString(0)+"."+str(nearestNeighbor.totalcount), nearestHamDist,
                                    barcodeLength = self.barcode_length, hasWsReq = not self.no_ws_req, hasUnknownBases = self.unknown_bases)

        return newBarcodeObj

    def getClosestSeeds(self, barcodeInt, count):
        minDist = float("inf")
        closestSeeds = []
        for seedBarcodeObj in self.seeds:
            dist = seedBarcodeObj.hamdist_str(self.int2string(barcodeInt), self.max_hamming_distance)
            if dist is not None and dist < self.max_hamming_distance:
                if dist < minDist:
                    minDist = dist
                    closestSeeds = [seedBarcodeObj]
                elif dist == minDist:
                    closestSeeds.append(seedBarcodeObj)
        return closestSeeds

    def addBarcodeObjectToSimilarBarcodeDictionaries(self, barcodeInt, count, newBarcodeObj):
        for dist in range(1, self.MAX_HAMMING_DISTANCE_FOR_DICT + 1):
            if count >= self.MIN_OBSERVATIONS_FOR_HAMMING_DISTANCE[dist]:
                for bc in similarBarcodes(barcodeInt, hamDist=dist, allowIndels=self.allow_indels, numBitsPerBase=self.base_size_in_bits):
                    if bc not in self.similarBarcodeDict[dist]:
                        self.similarBarcodeDict[dist][bc] = newBarcodeObj

    def printToFile(self, output_file):
        with open(output_file, 'w') as f:
            f.write("#Total_sequences:\t" + str(int(self.total_tries)))
            f.write("\n")
            f.write("#Total_good_reads:\t" + str(int(self.total_count) - int(self.lessThanTwo)))
            f.write("\n")
            f.write("#Total_bad_end_reads:\t" + str(int(self.num_bad_end)))
            f.write("\n")
            f.write("#Total_bad_seq_reads:\t" + str(int(self.num_bad_seq)))
            f.write("\n")
            f.write("#Total_reads_with_unknown_bases:\t" + str(int(self.num_seqs_with_unknown_bases)))
            f.write("\n")
            f.write("#Total_bad_base_quals:\t" + str(int(self.num_bad_qual_base)))
            f.write("\n")
            f.write("#Total_bad_avg_qual:\t" + str(int(self.num_bad_qual_avg)))
            f.write("\n")
            f.write("#Total_exceptions_qual:\t" + str(int(self.num_exceptions)))
            f.write("\n")
            f.write("#Total_less_than_two:\t" + str(int(self.lessThanTwo)))
            f.write("\n")
            f.write("#Total_known_contaminants:\t" + str(int(self.known_contaminant_count)))
            f.write("\n")

            for barcode in self.toPrint:
                barcode.setTotalCountForAllBarcodes(self.total_count)
                f.write(str(barcode))
                f.write("\n")

            f.write("## less than two")
            f.write("\n")

            for barcode in self.lessThanTwoList:
                f.write("# "+self.int2string(barcode))
                f.write("\n")

    def string2int(self, barcode_sequence):
        if self.no_ws_req:
            return string2int_basic(barcode_sequence, self.unknown_bases)
        else:
            return string2int_withWSReq(barcode_sequence)

    def int2string(self, barcodeInt):
        if self.no_ws_req:
            return int2string_basic(barcodeInt, self.barcode_length, self.unknown_bases)
        else:
            return int2string_withWSReq(barcodeInt, self.barcode_length)

def string2int_withWSReq(line):
    cur = 0
    toreturn = 0
    for char in line:
        if char not in ws_charvals[cur]: # expect alternating A/T,G/C
            return None
        toreturn = (toreturn << 1) + ws_charvals[cur][char]
        if cur == 0:
            cur = 1
        else:
            cur = 0
    return toreturn

def string2int_basic(line, with_unknown = False):
    toreturn = 0
    charVals = basic_charvals_with_unknown if with_unknown else basic_charvals
    baseSizeInBits = int(math.ceil(math.log(len(charVals), 2)))
    for char in line:
        if char not in charVals:
            return None
        toreturn = (toreturn << baseSizeInBits) + charVals[char]
    return toreturn

def binarySearch(a, x, lo=0, hi=None):   # can't use a to specify default for hi
    hi = hi if hi is not None else len(a) # hi defaults to len(a)
    pos = bisect_left(a,x,lo,hi)          # find insertion position
    return (pos if pos != hi and a[pos] == x else -1) # don't walk off the end

def barcode_count(input_file_list, output_file, barcode_index, barcode_length, known_contaminant="", phred_format=33, library_mode=False,
                  allow_indels=False, no_ws_req = False, unknown_bases = False, load_seqs_from_pickle = False, load_barcodes_from_pickle=False,
                  seq_pickle_file="barcode_counter.p", barcodes_pickle_file="barcode_counter.p", include_sequences_file=None, exclude_sequences_file=None,
                  sequence_primer=None, no_pickle_save = False, base_cutoff=10, average_cutoff=30, library_files = None, seed_pickle_file = None,
                  load_seeds_from_pickle = False):
    if load_barcodes_from_pickle:
        barcode_counter = loadFromPickle(barcodes_pickle_file, 'barcodes')
    else:
        # need to process barcodes and maybe seeds and/or sequences
        if load_seeds_from_pickle:
            barcode_counter = loadFromPickle(seed_pickle_file, 'seeds')
            barcode_counter.use_seeds = True
        else:
            # need to process barcodes, seeds, and maybe sequences
            if load_seqs_from_pickle:
                barcode_counter = loadFromPickle(seq_pickle_file, 'sequences')
            else:
                # need to process barcodes, seeds, and sequences
                # begin sequence processing
                barcode_counter = BarcodeCounter(barcode_index, phred_format = phred_format, known_contaminant_file = known_contaminant,
                                             library_mode = library_mode, barcode_length = barcode_length, allow_indels = allow_indels,
                                             no_ws_req = no_ws_req, unknown_bases = unknown_bases,
                                             include_sequences_file=include_sequences_file, exclude_sequences_file=exclude_sequences_file,
                                             sequence_primer=sequence_primer, base_cutoff=base_cutoff, average_cutoff=average_cutoff)
                print("Processing input files: " + currentTime())
                barcode_counter.processInputFiles(input_file_list)
                barcode_counter.postSequenceProcessing()
                if not no_pickle_save:
                    saveToPickle(barcode_counter, seq_pickle_file, 'sequences')
            # begin seed processing
            barcode_counter.library = sorted(list(barcode_counter.getLibrarySequenceIntegerValues(library_files))) if library_files is not None else []
            barcode_counter.use_seeds = len(barcode_counter.library) > 0
            if barcode_counter.use_seeds:
                print("Generating seed barcodes: " + currentTime())
                barcode_counter.generateSeedBarcodes()
                if not no_pickle_save:
                    saveToPickle(barcode_counter, seed_pickle_file, 'seeds')
        # begin barcode processing
        print("Generating barcode objects: " + currentTime())
        barcode_counter.generateBarcodeObjects()
        if not no_pickle_save:
            saveToPickle(barcode_counter, barcodes_pickle_file, 'barcodes')
    print("Printing to " + output_file + ": " + currentTime())
    barcode_counter.printToFile(output_file)

def loadFromPickle(pickleFile, entity):
    if pickleFile is None:
        raise AssertionError
    print("Loading " + entity + " from pickle file " + pickleFile + ": " + currentTime())
    return pickle.load(open(pickleFile, 'rb'))

def saveToPickle(obj, pickleFile, entity):
    if obj is None or pickleFile is None:
        raise AssertionError
    print("Saving " + entity + " to pickle file " + pickleFile + ": " + currentTime())
    pickle.dump(obj, open(pickleFile, 'wb'))


class HammingDistanceTests(unittest.TestCase):
    def test_basic_noNs_0(self):
        testBarcode = Barcode(barcode=0, count=0, nearestHam=None, nearestHamDist=0, hasWsReq=False, hasUnknownBases=False)
        self.assertEqual(testBarcode.hamdist(0), 0)
    def test_basic_noNs_1(self):
        testBarcode = Barcode(barcode=0, count=0, nearestHam=None, nearestHamDist=0, hasWsReq=False, hasUnknownBases=False)
        for i in range(1, 4):
            self.assertEqual(testBarcode.hamdist(i), 1)
        self.assertEqual(testBarcode.hamdist(1), 1)
    def test_basic_noNs_2(self):
        testBarcode = Barcode(barcode=0, count=0, nearestHam=None, nearestHamDist=0, hasWsReq=False, hasUnknownBases=False)
        self.assertEqual(testBarcode.hamdist(5), 2)
        self.assertEqual(testBarcode.hamdist(10), 2)
    def test_basic_Ns_0(self):
        testBarcode = Barcode(barcode=0, count=0, nearestHam=None, nearestHamDist=0, hasWsReq=False, hasUnknownBases=True)
        self.assertEqual(testBarcode.hamdist(0), 0)
    def test_basic_Ns_1(self):
        testBarcode = Barcode(barcode=0, count=0, nearestHam=None, nearestHamDist=0, hasWsReq=False, hasUnknownBases=True)
        for i in range(1, 5):
            self.assertEqual(testBarcode.hamdist(i), 1)
    def test_basic_Ns_2(self):
        testBarcode = Barcode(barcode=0, count=0, nearestHam=None, nearestHamDist=0, hasWsReq=False, hasUnknownBases=True)
        self.assertEqual(testBarcode.hamdist(10), 2)
    def test_ws_0(self):
        testBarcode = Barcode(barcode=0, count=0, nearestHam=None, nearestHamDist=0, hasWsReq=True)
        self.assertEqual(testBarcode.hamdist(0), 0)
    def test_ws_1(self):
        testBarcode = Barcode(barcode=0, count=0, nearestHam=None, nearestHamDist=0, hasWsReq=True)
        self.assertEqual(testBarcode.hamdist(1), 1)
        self.assertEqual(testBarcode.hamdist(1), 1)

class MutateTests(unittest.TestCase):
    def test_ham1_1bitperbase(self):
        testBarcode = 0
        muts = set(mutate(testBarcode, 0, 4, hamDist=1))
        self.assertEqual(muts, set([2**i for i in range(4)]))
    def test_ham1_2bitsperbase(self):
        testBarcode = 0
        muts = set(mutate(testBarcode, 0, 6, hamDist=1, numBitsPerBase=2))
        self.assertEqual(muts, set([1,2,3,4,8,12,16,32,48]))
    def test_ham1_3bitsperbase(self):
        testBarcode = 0
        muts = set(mutate(testBarcode, 0, 6, hamDist=1, numBitsPerBase=3))
        self.assertEqual(muts, set([1,2,3,4,5,6,7,8,16,24,32,40,48,56]))
    def test_ham2_1bitperbase(self):
        testBarcode = 0
        muts = set(mutate(testBarcode, 0, 4, hamDist=2))
        self.assertEqual(muts, set([3,5,6,9,10,12]))
    def test_ham2_2bitsperbase(self):
        testBarcode = 0
        muts = set(mutate(testBarcode, 0, 4, hamDist=2, numBitsPerBase=2))
        self.assertEqual(muts, set([5,6,7,9,10,11,13,14,15]))
        muts = set(mutate(testBarcode, 0, 6, hamDist=2, numBitsPerBase=2))
        self.assertEqual(muts, set([5,6,7,9,10,11,13,14,15,17,18,19,33,34,35,49,50,51,20,24,28,36,40,44,52,56,60]))
    def test_ham2_3bitsperbase(self):
        testBarcode = 0
        muts = set(mutate(testBarcode, 0, 6, hamDist=2, numBitsPerBase=3))
        self.assertEqual(muts, set([9,10,11,12,13,14,15,17,18,19,20,21,22,23,25,26,27,28,29,30,31,33,34,35,36,37,38,39,41,42,43,44,45,46,47,49,50,51,52,53,54,55,57,58,59,60,61,62,63]))

class BinarySearchTests(unittest.TestCase):
    def test_1(self):
        s = binarySearch([1, 3, 5, 7, 9], x=3)
        self.assertEqual(s, 1)

def currentTime():
    return datetime.strftime(datetime.now(), '%Y-%m-%d %H:%M:%S')

if __name__ == "__main__":
    unittest.main()